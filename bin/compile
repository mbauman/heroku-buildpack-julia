#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

PROFILE_PATH=".profile.d/julia.sh"

set-env() {
  echo "export $1=$2" >>$PROFILE_PATH
}

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "ENV variables:"
ls $ENV_DIR

cd ${BUILD_DIR}

mkdir -p .profile.d

DEFAULT_JULIA_VERSION=1.7.2
JULIA_VERSION="$DEFAULT_JULIA_VERSION"
if [[ -f Project.toml ]]; then
  JULIA_VERSION="$(sed -rn 's/^julia\s*=\s*"(.*)"/\1/p' Project.toml)"
  [[ "$JULIA_VERSION" == "" ]] && JULIA_VERSION="$DEFAULT_JULIA_VERSION"
fi

JULIA_MAJOR_VERSION="$(echo "$JULIA_VERSION" | awk '{split($0,a,"."); print a[1]}')"
JULIA_MINOR_VERSION="$(echo "$JULIA_VERSION" | awk '{split($0,a,"."); print a[2]}')"
JULIA_PATCH_VERSION="$(echo "$JULIA_VERSION" | awk '{split($0,a,"."); print a[3]}')"
[[ -z "$JULIA_PATCH_VERSION" ]] && JULIA_VERSION="${JULIA_VERSION}.0"

echo -n "-----> Installing julia $JULIA_VERSION ...."
deps="https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_MAJOR_VERSION}.${JULIA_MINOR_VERSION}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz"

for dep in $deps; do
  depb=$(basename $dep)
  echo "        - $depb"
  curl -LO $dep
  mkdir julia
  tar -xzf $depb -C julia --strip-components=1
  rm $depb
done

set-env PATH '$HOME/.apt/usr/bin:$HOME/julia/bin:$PATH'
set-env LIBRARY_PATH '$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/julia/lib:$HOME/julia/lib/x86_64-linux-gnu:$LIBRARY_PATH'
set-env LD_LIBRARY_PATH '$HOME/.apt/usr/lib/x86_64-linux-gnu:$HOME/julia/lib:$HOME/julia/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH'
set-env JULIA_LOAD_PATH '@:$HOME:'

export LIBRARY_PATH=./.apt/usr/lib/x86_64-linux-gnu:./julia/lib:./julia/lib/x86_64-linux-gnu:$LIBRARY_PATH
export LD_LIBRARY_PATH=./.apt/usr/lib/x86_64-linux-gnu:./julia/lib:./julia/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
export PATH=./.apt/usr/bin:./julia/bin:$PATH
export JULIA_LOAD_PATH="@:"
echo $PATH
echo $LD_LIBRARY_PATH
echo $(cmake -version)

echo "== julia installed =="
echo $(julia -v)
echo ""

if [ "${PIPESTATUS[*]}" != "0" ]; then
  echo " !     Failed to install ${JULIA_DIST}"
  exit 1
fi

# these are not presistent in heroku
mkdir -p ~/.julia/config
set +H

if [[ -f "$ENV_DIR/HEROKU_JULIA_PROJECT" ]]; then
  export JULIA_PROJECT=`cat $ENV_DIR/HEROKU_JULIA_PROJECT`
else
  export JULIA_PROJECT=$(pwd)
fi

# ! means that it is allowed to fail
! julia -e "import Pkg; Pkg.instantiate(); Pkg.API.precompile();"

# if there is a warmup.jl file, we run it to populate precompile.jl
# all code executed in this file will be precompiled
if [[ -f warmup.jl ]]; then
  echo "== warmup start =="
  ! julia --trace-compile="precompile.jl" warmup.jl
  echo "== warmup done =="
  ! wc -l precompile.jl
  echo ""
fi

if [[ -f "$ENV_DIR/HEROKU_JULIA_SKIP_SYSIMAGE" ]]; then
  echo "Skipping sysimage"
  # let's import all the required packages
  ! julia -e "import Pkg; eval(Expr(:using, (Expr(:(.), Symbol(n)) for n in keys(Pkg.API.project().dependencies))...))"
else
julia <<__EOF__
import Pkg
Pkg.activate(mktempdir())
Pkg.add("PackageCompiler")
using PackageCompiler
Pkg.activate(get(ENV, "JULIA_PROJECT", "."))
Pkg.instantiate()
Pkg.API.precompile()
proj = Pkg.API.project()
pkgs = Symbol.(keys(proj.dependencies))
proj.ispackage && push!(pkgs, Symbol(proj.name))
create_app(".", "${BUILD_DIR}/App"; incremental=false, force=true)
println("${BUILD_DIR}:")
println(readdir("${BUILD_DIR}"))
__EOF__
fi

rm -rf julia
